import os
import json
import time
import uuid
from typing import Dict, List, Any, Optional, Union

# Add parent directory to path so we can import from config
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config.settings import DATA_DIR

# Define path for targets storage
TARGETS_DIR = os.path.join(DATA_DIR, "targets")
TARGETS_FILE = os.path.join(TARGETS_DIR, "targets.json")

class TargetManager:
    """Manages targets for penetration testing."""
    
    def __init__(self):
        """Initialize the target manager."""
        self.targets = {}
        self._load_targets()
    
    def add_target(self, name: str, address: str, target_type: str = "host", tags: List[str] = None, 
                  description: str = "", metadata: Dict[str, Any] = None) -> str:
        """
        Add a target to the inventory.
        
        Args:
            name: Display name for the target
            address: IP address, URL, or hostname
            target_type: Type of target (host, network, domain, url)
            tags: List of tags for categorization
            description: Description of the target
            metadata: Additional metadata about the target
            
        Returns:
            The target ID
        """
        target_id = str(uuid.uuid4())
        
        self.targets[target_id] = {
            "id": target_id,
            "name": name,
            "address": address,
            "type": target_type,
            "tags": tags or [],
            "description": description,
            "metadata": metadata or {},
            "date_added": time.strftime("%Y-%m-%d %H:%M:%S"),
            "last_updated": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
        self._save_targets()
        return target_id
    
    def update_target(self, target_id: str, **kwargs) -> bool:
        """
        Update a target's information.
        
        Args:
            target_id: The ID of the target to update
            **kwargs: Fields to update
            
        Returns:
            True if successful, False otherwise
        """
        if target_id not in self.targets:
            return False
        
        target = self.targets[target_id]
        
        # Update fields
        for key, value in kwargs.items():
            if key in target and key != "id":  # Don't allow changing the ID
                target[key] = value
        
        target["last_updated"] = time.strftime("%Y-%m-%d %H:%M:%S")
        self._save_targets()
        return True
    
    def delete_target(self, target_id: str) -> bool:
        """
        Delete a target from the inventory.
        
        Args:
            target_id: The ID of the target to delete
            
        Returns:
            True if successful, False otherwise
        """
        if target_id not in self.targets:
            return False
        
        del self.targets[target_id]
        self._save_targets()
        return True
    
    def get_target(self, target_id: str) -> Optional[Dict[str, Any]]:
        """
        Get a specific target by ID.
        
        Args:
            target_id: The ID of the target to retrieve
            
        Returns:
            Target information or None if not found
        """
        return self.targets.get(target_id)
    
    def get_targets(self, target_type: str = None, tags: List[str] = None) -> List[Dict[str, Any]]:
        """
        Get targets matching the specified criteria.
        
        Args:
            target_type: Filter by target type
            tags: Filter by tags (targets must have at least one matching tag)
            
        Returns:
            List of matching targets
        """
        results = []
        
        for target in self.targets.values():
            # Apply type filter
            if target_type and target["type"] != target_type:
                continue
            
            # Apply tags filter (if any tag matches)
            if tags and not any(tag in target["tags"] for tag in tags):
                continue
            
            results.append(target)
        
        return results
    
    def get_all_targets(self) -> List[Dict[str, Any]]:
        """
        Get all targets.
        
        Returns:
            List of all targets
        """
        return list(self.targets.values())
    
    def add_tag_to_target(self, target_id: str, tag: str) -> bool:
        """
        Add a tag to a target.
        
        Args:
            target_id: The ID of the target
            tag: The tag to add
            
        Returns:
            True if successful, False otherwise
        """
        if target_id not in self.targets:
            return False
        
        if tag not in self.targets[target_id]["tags"]:
            self.targets[target_id]["tags"].append(tag)
            self.targets[target_id]["last_updated"] = time.strftime("%Y-%m-%d %H:%M:%S")
            self._save_targets()
        
        return True
    
    def remove_tag_from_target(self, target_id: str, tag: str) -> bool:
        """
        Remove a tag from a target.
        
        Args:
            target_id: The ID of the target
            tag: The tag to remove
            
        Returns:
            True if successful, False otherwise
        """
        if target_id not in self.targets:
            return False
        
        if tag in self.targets[target_id]["tags"]:
            self.targets[target_id]["tags"].remove(tag)
            self.targets[target_id]["last_updated"] = time.strftime("%Y-%m-%d %H:%M:%S")
            self._save_targets()
        
        return True
    
    def add_targets_from_scan_results(self, scan_results: Dict[str, Any], 
                                     tags: List[str] = None) -> List[str]:
        """
        Add targets from scan results.
        
        Args:
            scan_results: Network scan results
            tags: Tags to apply to the targets
            
        Returns:
            List of added target IDs
        """
        added_targets = []
        
        # Extract hosts from scan results
        if "hosts" in scan_results:
            for ip, host_info in scan_results["hosts"].items():
                hostname = host_info.get("hostname", "")
                
                # Use hostname as name if available, otherwise use IP
                name = hostname if hostname else ip
                
                # Create metadata from host information
                metadata = {
                    "state": host_info.get("state", ""),
                    "addresses": host_info.get("addresses", {}),
                    "ports": [p.get("port") for p in host_info.get("ports", []) if p.get("state") == "open"],
                    "services": [f"{p.get('service')} ({p.get('port')})" for p in host_info.get("ports", []) if p.get("state") == "open"]
                }
                
                # Add the target
                target_id = self.add_target(
                    name=name,
                    address=ip,
                    target_type="host" if "/" not in ip else "network",
                    tags=tags or ["scan-import"],
                    description=f"Imported from scan on {scan_results['scan_info'].get('timestamp', '')}",
                    metadata=metadata
                )
                
                added_targets.append(target_id)
        
        return added_targets
    
    def _load_targets(self) -> None:
        """Load targets from file."""
        try:
            # Create targets directory if it doesn't exist
            os.makedirs(TARGETS_DIR, exist_ok=True)
            
            # Load targets from file if it exists
            if os.path.exists(TARGETS_FILE):
                with open(TARGETS_FILE, 'r') as f:
                    self.targets = json.load(f)
            else:
                self.targets = {}
        except Exception as e:
            print(f"Error loading targets: {e}")
            self.targets = {}
    
    def _save_targets(self) -> None:
        """Save targets to file."""
        try:
            # Create targets directory if it doesn't exist
            os.makedirs(TARGETS_DIR, exist_ok=True)
            
            # Save targets to file
            with open(TARGETS_FILE, 'w') as f:
                json.dump(self.targets, f, indent=2)
        except Exception as e:
            print(f"Error saving targets: {e}") 