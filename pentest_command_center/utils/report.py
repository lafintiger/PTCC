import os
import sys
import json
import time
from pathlib import Path
from typing import Dict, List, Any, Optional

# Add parent directory to path so we can import from config
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config.settings import REPORTS_DIR

class ReportGenerator:
    """Generates formatted reports from penetration test findings."""
    
    def __init__(self):
        """Initialize the report generator."""
        # Create reports directory if it doesn't exist
        os.makedirs(REPORTS_DIR, exist_ok=True)
    
    def generate_text_report(self, title: str, findings: Dict[str, Any], template: str = "standard") -> str:
        """
        Generate a text-based report from findings.
        
        Args:
            title: Report title
            findings: Dictionary of findings data
            template: Report template to use
            
        Returns:
            Formatted report text
        """
        if template == "standard":
            return self._generate_standard_report(title, findings)
        elif template == "executive":
            return self._generate_executive_report(title, findings)
        else:
            return self._generate_standard_report(title, findings)
    
    def _generate_standard_report(self, title: str, findings: Dict[str, Any]) -> str:
        """Generate a standard-format report."""
        # Get current date and time
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        
        # Start building the report
        report = []
        
        # Add title and header
        report.append("=" * 80)
        report.append(f"{title}".center(80))
        report.append("=" * 80)
        report.append(f"Generated: {timestamp}\n")
        
        # Add executive summary if available
        if "executive_summary" in findings:
            report.append("\nEXECUTIVE SUMMARY")
            report.append("-" * 80)
            report.append(findings["executive_summary"])
        
        # Add findings
        report.append("\nFINDINGS")
        report.append("-" * 80)
        
        if "findings" in findings and isinstance(findings["findings"], list):
            for i, finding in enumerate(findings["findings"], 1):
                report.append(f"\nFinding {i}: {finding.get('title', 'Untitled Finding')}")
                report.append(f"Severity: {finding.get('severity', 'Unknown')}")
                report.append(f"\n{finding.get('description', 'No description provided')}")
                
                # Add affected components
                if "affected" in finding:
                    report.append("\nAffected Components:")
                    for component in finding["affected"]:
                        report.append(f" - {component}")
                
                # Add recommendations
                if "recommendation" in finding:
                    report.append("\nRecommendation:")
                    report.append(finding["recommendation"])
                
                report.append("-" * 40)
        elif "text_findings" in findings:
            # Handle plain text findings
            report.append(findings["text_findings"])
        else:
            report.append("No structured findings provided.")
        
        # Add recommendations if available
        if "recommendations" in findings:
            report.append("\nRECOMMENDATIONS")
            report.append("-" * 80)
            
            if isinstance(findings["recommendations"], list):
                for i, recommendation in enumerate(findings["recommendations"], 1):
                    report.append(f"\n{i}. {recommendation}")
            else:
                report.append(findings["recommendations"])
        
        # Add conclusion if available
        if "conclusion" in findings:
            report.append("\nCONCLUSION")
            report.append("-" * 80)
            report.append(findings["conclusion"])
        
        return "\n".join(report)
    
    def _generate_executive_report(self, title: str, findings: Dict[str, Any]) -> str:
        """Generate an executive-summary focused report."""
        # Get current date and time
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        
        # Start building the report
        report = []
        
        # Add title and header
        report.append("=" * 80)
        report.append(f"{title} - EXECUTIVE SUMMARY".center(80))
        report.append("=" * 80)
        report.append(f"Generated: {timestamp}\n")
        
        # Add executive summary
        if "executive_summary" in findings:
            report.append(findings["executive_summary"])
        else:
            report.append("No executive summary provided.")
        
        # Add risk summary
        report.append("\nRISK SUMMARY")
        report.append("-" * 80)
        
        # Count findings by severity
        severity_counts = {"critical": 0, "high": 0, "medium": 0, "low": 0, "info": 0}
        
        if "findings" in findings and isinstance(findings["findings"], list):
            for finding in findings["findings"]:
                severity = finding.get("severity", "").lower()
                if severity in severity_counts:
                    severity_counts[severity] += 1
            
            report.append("Findings by Severity:")
            report.append(f"Critical: {severity_counts['critical']}")
            report.append(f"High:     {severity_counts['high']}")
            report.append(f"Medium:   {severity_counts['medium']}")
            report.append(f"Low:      {severity_counts['low']}")
            report.append(f"Info:     {severity_counts['info']}")
            
            # Add top findings
            critical_and_high = [f for f in findings["findings"] if f.get("severity", "").lower() in ["critical", "high"]]
            
            if critical_and_high:
                report.append("\nTOP FINDINGS REQUIRING ATTENTION")
                report.append("-" * 80)
                
                for i, finding in enumerate(critical_and_high, 1):
                    report.append(f"\n{i}. {finding.get('title', 'Untitled Finding')} ({finding.get('severity', 'Unknown')})")
                    report.append(f"   {finding.get('description', 'No description provided')[:150]}...")
        
        # Add key recommendations
        if "recommendations" in findings:
            report.append("\nKEY RECOMMENDATIONS")
            report.append("-" * 80)
            
            if isinstance(findings["recommendations"], list):
                for i, recommendation in enumerate(findings["recommendations"][:5], 1):
                    report.append(f"\n{i}. {recommendation}")
            else:
                report.append(findings["recommendations"])
        
        return "\n".join(report)
    
    def save_report(self, report_text: str, filename: Optional[str] = None, report_format: str = "txt") -> str:
        """
        Save a report to a file.
        
        Args:
            report_text: The text of the report
            filename: Optional filename, will be auto-generated if not provided
            report_format: Format of the report (txt, md, html, etc.)
            
        Returns:
            Path to the saved report file
        """
        if not filename:
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filename = f"report_{timestamp}.{report_format}"
        
        # Make sure the filename has the correct extension
        if not filename.endswith(f".{report_format}"):
            filename = f"{filename}.{report_format}"
        
        # Create full path
        filepath = os.path.join(REPORTS_DIR, filename)
        
        # Write the report to the file
        with open(filepath, 'w') as f:
            f.write(report_text)
        
        return filepath
