import os
import json
import logging
from typing import Dict, List, Any, Optional
import asyncio

# Add parent directory to path so we can import from config
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class ToolKnowledgeBase:
    """
    Knowledge base for the PenTest Command Center tool
    Used to provide context to Ollama models
    """
    
    def __init__(self, ollama_client):
        self.ollama_client = ollama_client
        self.logger = logging.getLogger("tool_knowledge")
        self.knowledge_base = self._build_knowledge_base()
    
    def _build_knowledge_base(self) -> Dict[str, Any]:
        """Build the knowledge base about the tool"""
        return {
            "tool_name": "PenTest Command Center",
            "description": "A comprehensive penetration testing toolkit with AI assistance",
            "modules": {
                "network_scanner": {
                    "name": "Network Scanner",
                    "description": "Scan networks to discover hosts and services",
                    "functions": [
                        {"name": "scan_network", "description": "Scan a network using nmap", 
                         "usage": "In Network Scanning tab, enter target and select scan type (ping, quick, full, vuln)"},
                        {"name": "analyze_network_scan", "description": "Analyze scan results with AI", 
                         "usage": "After scan completes, click 'Analyze with AI' button"}
                    ],
                    "options": [
                        {"name": "Scan Type", "values": ["ping", "quick", "full", "vuln"], 
                         "description": "Type of scan to perform (host discovery, port scan, full scan, or vulnerability scan)"},
                        {"name": "Additional Arguments", "description": "Additional nmap arguments"}
                    ],
                    "example": "To scan a subnet: Enter 192.168.1.0/24 as target, select 'quick' scan type, click 'Scan Network'"
                },
                
                "vulnerability_scanner": {
                    "name": "Vulnerability Scanner",
                    "description": "Scan systems for vulnerabilities using tools like Nuclei",
                    "functions": [
                        {"name": "scan_with_nuclei", "description": "Scan targets for vulnerabilities using Nuclei", 
                         "usage": "In Vulnerability Scanning tab, enter target and template, then click 'Scan for Vulnerabilities'"},
                    ],
                    "options": [
                        {"name": "Template", "description": "Nuclei template to use"},
                        {"name": "Minimum Severity", "values": ["info", "low", "medium", "high", "critical"], 
                         "description": "Minimum severity level to report"}
                    ],
                    "example": "To scan for vulnerabilities: Enter target URL, optionally select template, click 'Scan for Vulnerabilities'"
                },
                
                "osint_scanner": {
                    "name": "OSINT Scanner",
                    "description": "Gather information from open sources",
                    "functions": [
                        {"name": "run_harvester", "description": "Run theHarvester to find emails and subdomains", 
                         "usage": "In OSINT tab, enter domain and source, click 'Run Harvester'"},
                        {"name": "search_shodan", "description": "Search Shodan for information about hosts", 
                         "usage": "In OSINT tab, enter IP or search query, click 'Search Shodan'"}
                    ],
                    "example": "To find emails: Enter 'example.com' as domain, select source (e.g., 'all'), click 'Run Harvester'"
                },
                
                "exploit_manager": {
                    "name": "Exploit Manager",
                    "description": "Search for and run exploits, including password cracking tools",
                    "functions": [
                        {"name": "search_metasploit_exploits", "description": "Search for Metasploit exploits", 
                         "usage": "In Exploitation tab, enter search term, click 'Search Exploits'"},
                        {"name": "run_exploit", "description": "Run a Metasploit exploit", 
                         "usage": "In Exploitation tab, enter exploit path and target, click 'Run Exploit'"},
                        {"name": "run_hashcat", "description": "Run Hashcat password cracking tool", 
                         "usage": "In Hashcat tab, enter hash file, hash type, attack mode, and options"},
                        {"name": "run_john", "description": "Run John the Ripper password cracking tool", 
                         "usage": "In John the Ripper tab, enter hash file, format, and options"},
                        {"name": "run_hydra", "description": "Run Hydra brute-force tool", 
                         "usage": "In Hydra tab, enter target, service, and credential options"}
                    ],
                    "example": "To crack passwords with Hashcat: Upload hash file, select hash type (e.g., MD5), select dictionary attack, provide wordlist path"
                },
                
                "document_analyzer": {
                    "name": "Document Analyzer",
                    "description": "Analyze technical documents like network diagrams using OCR and AI",
                    "functions": [
                        {"name": "process_document", "description": "Upload and analyze a document", 
                         "usage": "In Document Analysis tab, provide document details and file, click 'Upload & Analyze'"},
                        {"name": "search_documents", "description": "Search for documents", 
                         "usage": "In Manage Documents tab, enter search terms, click 'Search/Filter'"},
                        {"name": "query_documents", "description": "Query documents with natural language", 
                         "usage": "In Document Intelligence tab, enter natural language query, click 'Query Documents'"}
                    ],
                    "supported_formats": ["JPG", "PNG", "PDF"],
                    "document_types": [
                        "network_diagram - Network topology diagrams",
                        "credentials - Documents containing credentials",
                        "system_documentation - System specifications",
                        "vulnerability_report - Previous vulnerability assessments",
                        "other - Other technical documents"
                    ],
                    "example": "To analyze a network diagram: Upload JPG/PNG, select type 'network_diagram', click 'Upload & Analyze'"
                },
                
                "system_monitor": {
                    "name": "System Monitor",
                    "description": "Monitor system resources and active tasks",
                    "functions": [
                        {"name": "get_latest_stats", "description": "Get the latest system statistics", 
                         "usage": "In Dashboard tab, click 'Refresh Dashboard' or enable auto-refresh"}
                    ],
                    "metrics": ["CPU usage", "Memory usage", "Disk usage", "Active tasks"],
                    "example": "To monitor system resources: Go to Dashboard tab, click 'Refresh Dashboard' or check 'Auto-refresh'"
                },
                
                "ai_assistant": {
                    "name": "AI Assistant",
                    "description": "AI-powered penetration testing assistance",
                    "functions": [
                        {"name": "generate_attack_plan", "description": "Generate an attack plan for a target", 
                         "usage": "In AI Assistant tab, enter target information, click 'Generate Attack Plan'"},
                        {"name": "translate_query_to_command", "description": "Translate natural language to command", 
                         "usage": "In AI Assistant tab, enter query, select context, click 'Translate to Command'"},
                        {"name": "explain_vulnerability", "description": "Get an explanation of a vulnerability", 
                         "usage": "In AI Assistant tab, enter vulnerability name, click 'Explain Vulnerability'"}
                    ],
                    "example": "To generate an attack plan: Describe target in the text box, click 'Generate Attack Plan'"
                },
                
                "report_generator": {
                    "name": "Report Generator",
                    "description": "Generate penetration testing reports",
                    "functions": [
                        {"name": "generate_report", "description": "Generate a report from findings", 
                         "usage": "In Reporting tab, enter report title and findings, click 'Generate Report'"}
                    ],
                    "example": "To create a report: Enter report title, paste JSON findings or write in plain text, click 'Generate Report'"
                }
            },
            
            "common_tasks": [
                {
                    "task": "Scanning a network",
                    "steps": [
                        "Go to Network Scanning tab",
                        "Enter target IP or range (e.g., 192.168.1.0/24)",
                        "Select scan type (ping for discovery, quick for port scan, full for comprehensive)",
                        "Click 'Scan Network'",
                        "View results in tables and visualizations"
                    ]
                },
                {
                    "task": "Vulnerability scanning",
                    "steps": [
                        "Go to Vulnerability Scanning tab",
                        "Enter target URL or IP",
                        "Select template (optional)",
                        "Set minimum severity level",
                        "Click 'Scan for Vulnerabilities'",
                        "Review findings in the results table"
                    ]
                },
                {
                    "task": "Analyzing network diagrams",
                    "steps": [
                        "Go to Document Analysis tab",
                        "Enter document name and select type 'network_diagram'",
                        "Upload network diagram image (JPG/PNG) or PDF",
                        "Click 'Upload & Analyze'",
                        "Review the AI analysis of the diagram"
                    ]
                },
                {
                    "task": "Cracking passwords",
                    "steps": [
                        "Go to Exploitation tab",
                        "Select the appropriate tool (Hashcat, John, or Hydra)",
                        "Provide the required inputs (hash file, target, etc.)",
                        "Configure attack options",
                        "Click the run button",
                        "View results in the output section"
                    ]
                },
                {
                    "task": "Generating reports",
                    "steps": [
                        "Perform scanning and analysis",
                        "Go to Reporting tab",
                        "Enter report title",
                        "Provide findings in JSON or text format",
                        "Click 'Generate Report'",
                        "Review and save the generated report"
                    ]
                }
            ],
            
            "troubleshooting": [
                {
                    "problem": "Scan fails to start",
                    "solutions": [
                        "Ensure you have entered a valid target",
                        "Check that required tools (e.g., nmap) are installed",
                        "Verify you have permission to scan the target",
                        "Check network connectivity to the target"
                    ]
                },
                {
                    "problem": "OCR not working for document analysis",
                    "solutions": [
                        "Verify Tesseract OCR is installed on your system",
                        "Ensure the image is clear and high-resolution",
                        "Check that the file format is supported (JPG, PNG, PDF)",
                        "Try converting the document to a different format"
                    ]
                },
                {
                    "problem": "AI analysis returns errors",
                    "solutions": [
                        "Ensure Ollama is running and accessible",
                        "Check that at least one model is installed (e.g., llama3)",
                        "Verify the API endpoint is correct in settings",
                        "Try using a different model"
                    ]
                },
                {
                    "problem": "Resource monitoring shows high usage",
                    "solutions": [
                        "Close unnecessary scans or tasks",
                        "Reduce scan intensity or rate limits",
                        "Check for processes that might be consuming resources",
                        "Restart the application if memory usage is very high"
                    ]
                }
            ]
        }
    
    async def get_knowledge_context(self, topic=None):
        """Get the knowledge context for a specific topic or the entire knowledge base"""
        if topic:
            # Return specific topic from knowledge base
            if topic in self.knowledge_base.get("modules", {}):
                return self.knowledge_base["modules"][topic]
            elif topic == "common_tasks":
                return self.knowledge_base.get("common_tasks", [])
            elif topic == "troubleshooting":
                return self.knowledge_base.get("troubleshooting", [])
            else:
                return {"error": f"Topic '{topic}' not found in knowledge base"}
        else:
            # Return entire knowledge base
            return self.knowledge_base
    
    async def query_with_tool_context(self, query, model=None):
        """Query Ollama with tool knowledge context"""
        # Get the entire knowledge base
        knowledge = self.knowledge_base
        
        # Create a prompt that includes the knowledge base and user query
        prompt = f"""You are an assistant for the PenTest Command Center tool.
Use the following knowledge about the tool to answer the user's question:

TOOL KNOWLEDGE:
{json.dumps(knowledge, indent=2)}

USER QUERY:
{query}

Provide a detailed and accurate response based on the tool knowledge above. If you don't know the answer based on the provided knowledge, say so rather than making information up.
"""
        
        # Query Ollama
        response = await self.ollama_client.generate(prompt, model=model)
        return response
    
    async def initialize_model_with_knowledge(self, model=None):
        """Initialize a model with the tool knowledge"""
        knowledge = self.knowledge_base
        
        # Create a prompt that provides the knowledge base
        prompt = f"""I'm going to provide you with comprehensive knowledge about a tool called PenTest Command Center.
Please store this information for future reference when answering questions about this tool.

TOOL KNOWLEDGE:
{json.dumps(knowledge, indent=2)}

Please confirm that you've stored this information about the PenTest Command Center.
"""
        
        # Send to Ollama
        response = await self.ollama_client.generate(prompt, model=model)
        
        if "confirm" in response.lower() or "stored" in response.lower():
            return True, response
        else:
            return False, response 